require('dotenv').config();
const { Client, GatewayIntentBits, Partials, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');

const TOKEN         = process.env.BOT_TOKEN;
const GUILD_ID      = process.env.GUILD_ID;
const CHANNEL_ID    = process.env.CHANNEL_ID;
const CITOYEN_ID    = process.env.ROLE_CITOYEN_ID;
const NON_VALIDE_ID = process.env.ROLE_NON_VALIDE_ID;

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds, 
    GatewayIntentBits.GuildMembers, 
    GatewayIntentBits.GuildMessages, 
    GatewayIntentBits.MessageContent
  ],
  partials: [Partials.Message, Partials.Channel, Partials.Reaction, Partials.GuildMember, Partials.User]
});

// ---- Embed design ----
function buildVerifEmbed() {
  return new EmbedBuilder()
    .setColor('#FF7500')
    .setAuthor({ name: 'V√©rification NXSTxV√©rif', iconURL: 'https://i.goopics.net/4pagyj.png' })
    .setTitle('üåü V√©rification Obligatoire')
    .setDescription([
      "Bienvenue sur le serveur **NXST RP**‚ÄØ! üö¶",
      "",
      "Afin d‚Äôassurer une exp√©rience RP s√©rieuse et s√©curis√©e, nous avons mis en place une v√©rification simple‚ÄØ:",
      "",
      "üî∏ **Lis attentivement le texte ci-dessous.**",
      "üî∏ **Deux mots cach√©s** sont gliss√©s dans le texte (hors th√®me GTA).",
      "üî∏ Clique sur ¬´‚ÄØValider‚ÄØ¬ª puis indique ces deux mots pour d√©bloquer l‚Äôacc√®s au serveur.",
      "",
      "```",
      "Chez NXST, chaque citoyen contribue √† l‚Äôambiance unique de notre serveur. Ici, le respect et la coh√©sion de groupe sont la base de toute aventure. Prends toujours le temps de t‚Äôimpr√©gner de l‚Äôhistoire et d‚Äô√©couter les conseils des anciens.",
      "",
      "L‚Äôimprovisation est permise, mais jamais au d√©triment de l‚Äôimmersion‚ÄØ: √©vite les r√©actions impulsives qui pourraient nuire au RP des autres joueurs, comme si tu lan√ßais une toupie de Beyblade au beau milieu d‚Äôune sc√®ne s√©rieuse‚ÄØ!",
      "",
      "Rappelle-toi‚ÄØ: l‚Äôentraide, la patience et le fairplay sont essentiels pour √©voluer. M√™me un ma√Ætre Pokemon sait que l‚Äôapprentissage passe par le respect de chaque r√®gle et le soutien de la communaut√©.",
      "",
      "Chaque situation peut se r√©gler avec intelligence, calme et une touche d‚Äôhumour. Privil√©gie le dialogue avant toute action radicale et n‚Äôh√©site jamais √† demander de l‚Äôaide au staff.",
      "",
      "En respectant ces principes, tu contribueras √† faire de NXST RP une exp√©rience m√©morable pour tous.",
      "```",
      "",
      "‚è≥ *Prends le temps de lire‚Ä¶ seuls ceux qui jouent le jeu pourront passer‚ÄØ!*"
    ].join('\n'))
    .setFooter({ text: 'NXSTxV√©rif ‚Ä¢ Acc√®s s√©curis√©', iconURL: 'https://i.goopics.net/4pagyj.png' });
}


client.once('ready', async () => {
  console.log(`‚úÖ Connect√© en tant que ${client.user.tag}`);
  const channel = await client.channels.fetch(CHANNEL_ID);
  if (channel) {
    // Supprime anciens messages du bot pour √©viter le spam
    const messages = await channel.messages.fetch({ limit: 5 });
    const botMessages = messages.filter(msg => msg.author.id === client.user.id);
    for (const msg of botMessages.values()) {
      await msg.delete().catch(() => {});
    }
    // Envoie l'embed
    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('verif_start')
        .setLabel('‚úÖ Valider & Acc√©der au serveur')
        .setStyle(ButtonStyle.Success)
    );
    await channel.send({ embeds: [buildVerifEmbed()], components: [row] });
  } else {
    console.log('Salon de v√©rification introuvable');
  }
});

// ---- Interaction : bouton ----
client.on('interactionCreate', async interaction => {
  if (interaction.isButton() && interaction.customId === 'verif_start') {
    // Modal √† remplir
    const modal = new ModalBuilder()
      .setCustomId('verif_modal')
      .setTitle('V√©rification d\'acc√®s')
      .addComponents(
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId('mot1')
            .setLabel('Mot cl√© 1 (indice‚ÄØ: B...)')
            .setStyle(TextInputStyle.Short)
            .setMaxLength(25)
            .setRequired(true)
        ),
        new ActionRowBuilder().addComponents(
          new TextInputBuilder()
            .setCustomId('mot2')
            .setLabel('Mot cl√© 2 (indice‚ÄØ: P...)')
            .setStyle(TextInputStyle.Short)
            .setMaxLength(25)
            .setRequired(true)
        ),
      );
    await interaction.showModal(modal);
  }

  // ---- Modal : Validation des r√©ponses ----
  if (interaction.isModalSubmit() && interaction.customId === 'verif_modal') {
    const mot1 = interaction.fields.getTextInputValue('mot1').trim().toLowerCase();
    const mot2 = interaction.fields.getTextInputValue('mot2').trim().toLowerCase();

    if (
      (mot1 === 'beyblade' && mot2 === 'pokemon') ||
      (mot1 === 'pokemon' && mot2 === 'beyblade')
    ) {
      try {
        // Attribution des r√¥les
        const member = await interaction.guild.members.fetch(interaction.user.id);
        if (!member.roles.cache.has(CITOYEN_ID)) await member.roles.add(CITOYEN_ID);
        if (member.roles.cache.has(NON_VALIDE_ID)) await member.roles.remove(NON_VALIDE_ID);

        await interaction.reply({ content: '‚úÖ Bravo ! Tu es d√©sormais **Citoyen** sur NXST RP. Profite du serveur !', ephemeral: true });
      } catch (err) {
        await interaction.reply({ content: '‚ùå Erreur lors de la validation, contacte un staff.', ephemeral: true });
      }
    } else {
      await interaction.reply({ content: '‚ùå Les mots cl√©s ne sont pas corrects ! Relis bien le texte.', ephemeral: true });
    }
  }
});

client.login(TOKEN);
